name: Terraform Plan, Apply & Destroy

on:
  push:
    branches:
      - main
    paths:
      - 'environments/**'
      - 'modules/**'
      - 'backend/**'
      - '.github/workflows/terraform.yaml'

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        type: choice
        options:
          - dev
          - qa
          - stage
          - prod
      action:
        description: "Action to perform"
        required: true
        type: choice
        options:
          - apply
          - destroy

jobs:

  detect-changes:
    name: Detect Changed Environments
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.set-matrix.outputs.envs }}

    steps:
      - uses: actions/checkout@v3

      - name: Get list of changed environments
        id: set-matrix
        run: |
          echo "Detecting changed environments..."
          CHANGED_ENVS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^environments/' | cut -d '/' -f 2 | sort -u)
          if [ -z "$CHANGED_ENVS" ]; then
            echo "envs=[]" >> $GITHUB_OUTPUT
          else
            ENVS_JSON=$(echo "$CHANGED_ENVS" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "envs=$ENVS_JSON" >> $GITHUB_OUTPUT
          fi

      - name: Show detected environments
        run: echo "Detected: ${{ steps.set-matrix.outputs.envs }}"

  terraform-auto-plan:
    name: Terraform Plan for ${{ matrix.env }}
    needs: detect-changes
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push' &&
      needs.detect-changes.outputs.environments != '[]'

    strategy:
      matrix:
        env: ${{ fromJson(needs.detect-changes.outputs.environments) }}

    defaults:
      run:
        working-directory: environments/${{ matrix.env }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: terraform init -backend-config=../../backend/${{ matrix.env }}-backend.tf

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars"

  terraform-manual:
    name: Manual ${{ github.event.inputs.action }} (${{ github.event.inputs.environment }})
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: environments/${{ github.event.inputs.environment }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: terraform init -backend-config=../../backend/${{ github.event.inputs.environment }}-backend.tf

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply or Destroy
        run: |
          if [ "${{ github.event.inputs.action }}" = "apply" ]; then
            terraform apply -auto-approve -var-file="terraform.tfvars"
          elif [ "${{ github.event.inputs.action }}" = "destroy" ]; then
            terraform destroy -auto-approve -var-file="terraform.tfvars"
          fi
